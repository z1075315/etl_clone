CREATE OR REPLACE FUNCTION staging.fn_full_load_to_stg_merch_level_capacity()
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_step              INT;
	v_count             INT;	
    cur_csv_merch_level_capacity CURSOR FOR
    SELECT merch_level_id, pog_capacity, footage, created_user, created_ts, updated_user, updated_ts
    FROM   staging.csv_merch_level_capacity;
BEGIN
    v_step := 1;
	
	SELECT   COUNT(1)
	INTO     v_count
	FROM     staging.csv_merch_level_capacity;
	
	IF (v_count = 0) THEN
	     RETURN 0;
	END IF;
	
	TRUNCATE staging.stg_merch_level_capacity RESTART IDENTITY CASCADE;
	
    FOR rec_cur_csv_merch_level_capacity IN cur_csv_merch_level_capacity LOOP
        BEGIN
            INSERT INTO staging.stg_merch_level_capacity 
			     (merch_level_id,
	              pog_capacity,
	              footage,
	              created_user,
	              created_ts,
	              updated_user,
	              updated_ts)
            VALUES 
			     (rec_cur_csv_merch_level_capacity.merch_level_id,
	              rec_cur_csv_merch_level_capacity.pog_capacity,
	              rec_cur_csv_merch_level_capacity.footage,
	              rec_cur_csv_merch_level_capacity.created_user,
	              rec_cur_csv_merch_level_capacity.created_ts,
	              rec_cur_csv_merch_level_capacity.updated_user,
	              rec_cur_csv_merch_level_capacity.updated_ts);
	    EXCEPTION 
            WHEN OTHERS THEN
                 INSERT INTO staging.error_logs(error_id, error_function_name, error_step_number, error_state, error_msg, primarykeyid) 
                 VALUES(nextval('staging.error_logs_pk_seq'), 'fn_full_load_to_stg_merch_level_capacity', v_step, sqlstate, sqlerrm, rec_cur_csv_merch_level_capacity.merch_level_id);
				 RETURN 1;
	    END;
    END LOOP;
    v_step := 2;
	RETURN 0;
END;
$function$
;
